using System.Diagnostics;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Valigator.SourceGenerator.Validatables;

[Generator]
public class ValidatableSourceGenerator : IIncrementalGenerator
{
	private static readonly SymbolDisplayFormat QualifiedNameArityFormat = new SymbolDisplayFormat(
		globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
		typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces
	);

	public void Initialize(IncrementalGeneratorInitializationContext initContext)
	{
		IncrementalValuesProvider<ObjectProperties?> validatablesToGenerate = initContext
			.SyntaxProvider.ForAttributeWithMetadataName(
				"Valigator.ValidatableAttribute",
				predicate: static (node, _) => node is ClassDeclarationSyntax or RecordDeclarationSyntax,
				transform: static (ctx, _) => GetObjectProperties(ctx.SemanticModel, ctx.TargetNode)
			)
			.Where(static m => m is not null);

		initContext.RegisterSourceOutput(
			validatablesToGenerate,
			static (sourceProductionContext, objectProperties) => Execute(objectProperties, sourceProductionContext)
		);
	}

	private static ObjectProperties? GetObjectProperties(SemanticModel semanticModel, SyntaxNode targetNode)
	{
		Debug.Assert(targetNode is ClassDeclarationSyntax or RecordDeclarationSyntax);

		if (semanticModel.GetDeclaredSymbol(targetNode) is not INamedTypeSymbol typeSymbol)
		{
			return null;
		}

		var usings = GetUsings(targetNode);
		var propertyDeclarations = GetPropertyDeclarations(targetNode);

		var properties = new List<PropertyProperties>();

		foreach (var propertyDeclaration in propertyDeclarations)
		{
			var validatorAttributes = propertyDeclaration
				.AttributeLists.SelectMany(attributeList => attributeList.Attributes)
				.Where(attribute =>
					semanticModel
						.GetTypeInfo(attribute)
						.Type?.GetAttributes()
						.Any(x =>
							x.AttributeClass?.ToDisplayString(QualifiedNameArityFormat)
							== "Valigator.ValidatorAttribute"
						) ?? false
				)
				.Select(attribute => new ValidatorAttributeProperties(
					attribute.Name.ToString(),
					attribute.ArgumentList?.Arguments.ToString() ?? string.Empty
				))
				.ToArray();

			properties.Add(
				new PropertyProperties(
					propertyDeclaration.Identifier.ValueText,
					propertyDeclaration.Type.ToString(),
					new EquatableArray<ValidatorAttributeProperties>(validatorAttributes)
				)
			);
		}

		return new ObjectProperties
		{
			Usings = new EquatableArray<string>(usings.Select(usingSyntax => usingSyntax.ToString()).ToArray()),
			ClassOrRecordKeyword = typeSymbol.IsRecord ? "record" : "class",
			Name = typeSymbol.Name,
			Namespace = typeSymbol.ContainingNamespace.ToString(),
			Properties = new EquatableArray<PropertyProperties>(properties.ToArray()),
		};
	}

	private static IEnumerable<PropertyDeclarationSyntax> GetPropertyDeclarations(SyntaxNode targetNode)
	{
		IEnumerable<PropertyDeclarationSyntax> propertyDeclarations = targetNode
			is ClassDeclarationSyntax classDeclarationSyntax
			? classDeclarationSyntax.Members.OfType<PropertyDeclarationSyntax>()
			: ((RecordDeclarationSyntax)targetNode).Members.OfType<PropertyDeclarationSyntax>();
		return propertyDeclarations;
	}

	private static UsingDirectiveSyntax[] GetUsings(SyntaxNode targetNode)
	{
		var usings = targetNode.Parent?.Parent is CompilationUnitSyntax cus
			? cus.Usings.ToArray()
			: Array.Empty<UsingDirectiveSyntax>();
		return usings;
	}

	private static void Execute(ObjectProperties? validatorProperties, SourceProductionContext context)
	{
		// 		if (validatorProperties is null)
		// 		{
		// 			return;
		// 		}
		//
		// 		var constructors = validatorProperties.Ctors.Select(ctor =>
		// 			$"public {validatorProperties.Name}Attribute({ctor}) {{ }}"
		// 		);
		//
		// 		SourceText sourceText = SourceText.From(
		// 			$@"// <auto-generated/>
		//
		// #pragma warning disable CS0105
		// {string.Join("\n", validatorProperties.Usings)}
		// #pragma warning restore CS0105
		//
		// namespace {validatorProperties.Namespace}
		// {{
		// 	[System.AttributeUsage(AttributeTargets.Property)]
		// 	public class {validatorProperties.Name}Attribute : System.Attribute
		//     {{
		// 		{string.Join("\n\t\t", constructors)}
		//     }}
		// }}",
		// 			Encoding.UTF8
		// 		);
		//
		// 		context.AddSource($"{validatorProperties.Name}Attribute.g.cs", sourceText);
	}
}
