using System.Diagnostics;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Valigator.SourceGenerator.ValidatorAttributes;

[Generator]
public class ValidatorAttributesSourceGenerator : IIncrementalGenerator
{
	public void Initialize(IncrementalGeneratorInitializationContext initContext)
	{
		IncrementalValuesProvider<ValidatorProperties?> validatorAttributesToGenerate = initContext
			.SyntaxProvider.ForAttributeWithMetadataName(
				"Valigator.ValidatorAttribute",
				predicate: static (node, _) => node is ClassDeclarationSyntax,
				transform: static (ctx, _) => GetValidatorProperties(ctx.SemanticModel, ctx.TargetNode)
			)
			.Where(static m => m is not null);

		initContext.RegisterSourceOutput(
			validatorAttributesToGenerate,
			static (sourceProductionContext, validatorProperties) =>
				Execute(validatorProperties, sourceProductionContext)
		);
	}

	private static ValidatorProperties? GetValidatorProperties(SemanticModel semanticModel, SyntaxNode targetNode)
	{
		if (semanticModel.GetDeclaredSymbol(targetNode) is not INamedTypeSymbol typeSymbol)
		{
			return null;
		}

		if (targetNode is not ClassDeclarationSyntax classDeclarationSyntax)
		{
			return null;
		}

		var usings = classDeclarationSyntax.Parent?.Parent is CompilationUnitSyntax cus
			? cus.Usings.ToArray()
			: Array.Empty<UsingDirectiveSyntax>();

		var ctors = classDeclarationSyntax
			.SyntaxTree.GetRoot()
			.DescendantNodes()
			.OfType<ConstructorDeclarationSyntax>();

		return new ValidatorProperties
		{
			Usings = new EquatableArray<string>(usings.Select(usingSyntax => usingSyntax.ToString()).ToArray()),
			Ctors = new EquatableArray<string>(
				ctors.Select(ctor => ctor.ParameterList.Parameters.ToString()).ToArray()
			),
			Name = typeSymbol.Name.Replace("Validator", ""),
			Namespace = typeSymbol.ContainingNamespace.ToString(),
		};
	}

	private static void Execute(ValidatorProperties? validatorProperties, SourceProductionContext context)
	{
		if (validatorProperties is null)
		{
			return;
		}

		var constructors = validatorProperties.Ctors.Select(ctor =>
			$"public {validatorProperties.Name}Attribute({ctor}) {{ }}"
		);

		SourceText sourceText = SourceText.From(
			$@"// <auto-generated/>

#pragma warning disable CS0105
{string.Join("\n", validatorProperties.Usings)}
#pragma warning restore CS0105

namespace {validatorProperties.Namespace}
{{
	[System.AttributeUsage(AttributeTargets.Property)]
	public class {validatorProperties.Name}Attribute : System.Attribute
    {{
		{string.Join("\n\t\t", constructors)}
    }}
}}",
			Encoding.UTF8
		);

		context.AddSource($"{validatorProperties.Name}Attribute.g.cs", sourceText);
	}
}
